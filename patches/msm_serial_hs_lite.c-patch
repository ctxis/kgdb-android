diff --git a/drivers/tty/serial/msm_serial_hs_lite.c b/drivers/tty/serial/msm_serial_hs_lite.c
index b0fd7957196d..79f4f85c9060 100644
--- a/drivers/tty/serial/msm_serial_hs_lite.c
+++ b/drivers/tty/serial/msm_serial_hs_lite.c
@@ -764,6 +764,10 @@ static void msm_hsl_reset(struct uart_port *port)
 	msm_hsl_write(port, RESET_BREAK_INT, regmap[vid][UARTDM_CR]);
 	msm_hsl_write(port, RESET_CTS, regmap[vid][UARTDM_CR]);
 	msm_hsl_write(port, RFR_LOW, regmap[vid][UARTDM_CR]);
+
+	/* Disable DM modes */
+	msm_hsl_write(port, 0, regmap[vid][UARTDM_DMEN]);
+
 }
 
 static unsigned int msm_hsl_get_mctrl(struct uart_port *port)
@@ -992,8 +996,8 @@ static int msm_hsl_startup(struct uart_port *port)
 	if (!(is_console(port)) || (!port->cons) ||
 		(port->cons && (!(port->cons->flags & CON_ENABLED)))) {
 
-		if (msm_serial_hsl_has_gsbi(port))
-			set_gsbi_uart_func_mode(port);
+		if (msm_serial_hsl_has_gsbi(port))		
+            set_gsbi_uart_func_mode(port);
 
 		if (pdata && pdata->use_pm)
 			wake_lock(&msm_hsl_port->port_open_wake_lock);
@@ -1298,6 +1302,146 @@ static void msm_hsl_power(struct uart_port *port, unsigned int state,
 	}
 }
 
+
+
+
+
+
+#ifdef CONFIG_CONSOLE_POLL
+
+/* defines from msm_serial.h */
+#define UARTDM_DMEN_RX_SC_ENABLE BIT(5)
+#define UARTDM_DMEN_TX_SC_ENABLE BIT(4)
+
+#define UARTDM_RXFS_BUF_SHIFT	0x7
+#define UARTDM_RXFS_BUF_MASK	0x7
+
+static int msm_poll_init(struct uart_port *port)
+{
+	unsigned int vid;
+
+	vid = UART_TO_MSM(port)->ver_id;
+
+	/* Enable single character mode on RX FIFO */
+    /* A later patch from David Boyd suggests this causes problems... */
+    /*msm_hsl_write(port, UARTDM_DMEN_RX_SC_ENABLE, regmap[vid][UARTDM_DMEN]);*/
+
+	return 0;
+}
+
+static int msm_poll_get_char_dm(struct uart_port *port)
+{
+	int c;
+	static u32 slop;
+	static int count;
+	unsigned char *sp = (unsigned char *)&slop;
+    unsigned int vid;
+
+    vid = UART_TO_MSM(port)->ver_id;
+
+	/* Check if a previous read had more than one char */
+	if (count) {
+		c = sp[sizeof(slop) - count];
+		count--;
+	/* Or if FIFO is empty */
+	} else if (!(msm_hsl_read(port, regmap[vid][UARTDM_SR]) & UARTDM_SR_RXRDY_BMSK)) { /* bit 0  */
+		/*
+		 * If RX packing buffer has less than a word, force stale to
+		 * push contents into RX FIFO
+		 */
+		count = msm_hsl_read(port, regmap[vid][UARTDM_RXFS]);
+
+		count = (count >> UARTDM_RXFS_BUF_SHIFT) & UARTDM_RXFS_BUF_MASK;
+		if (count) {
+			msm_hsl_write(port, FORCE_STALE_EVENT, regmap[vid][UARTDM_CR]);
+			slop = msm_hsl_read(port, regmap[vid][UARTDM_RF]);
+			c = sp[0];
+			count--;
+
+            msm_hsl_write(port, RESET_STALE_INT, regmap[vid][UARTDM_CR]);
+            msm_hsl_write(port, 0xFF, regmap[vid][UARTDM_DMRX]);
+            msm_hsl_write(port, STALE_EVENT_ENABLE, regmap[vid][UARTDM_CR]);
+
+		} else {
+			c = NO_POLL_CHAR;
+		}
+	/* FIFO has a word */
+	} else {
+		slop = msm_hsl_read(port, regmap[vid][UARTDM_RF]);
+		c = sp[0];
+		count = sizeof(slop) - 1;
+	}
+
+	return c;
+}
+
+
+static int msm_poll_get_char(struct uart_port *port)
+{
+	u32 imr;
+	int c;
+	unsigned int vid;
+
+	vid = UART_TO_MSM(port)->ver_id;
+
+	/* Disable all interrupts */
+	imr = msm_hsl_read(port, regmap[vid][UARTDM_IMR]);
+	msm_hsl_write(port, 0, regmap[vid][UARTDM_IMR]);
+
+
+    c = msm_poll_get_char_dm(port);
+
+
+	/* Enable interrupts */
+	msm_hsl_write(port, imr, regmap[vid][UARTDM_IMR]);
+
+	return c;
+}
+
+static void reset_dm_count(struct uart_port *port, int count)
+{
+	unsigned int vid;
+
+	vid = UART_TO_MSM(port)->ver_id;
+
+    wait_for_xmitr(port);
+    msm_hsl_write(port, count, regmap[vid][UARTDM_NCF_TX]);
+    msm_hsl_read(port, regmap[vid][UARTDM_NCF_TX]);
+}
+
+static void msm_poll_put_char(struct uart_port *port, unsigned char c)
+{
+	u32 imr;
+	unsigned int vid;
+
+	vid = UART_TO_MSM(port)->ver_id;
+
+	/* Disable all interrupts */
+	imr = msm_hsl_read(port, regmap[vid][UARTDM_IMR]);
+	msm_hsl_write(port, 0, regmap[vid][UARTDM_IMR]);
+
+	/*if (msm_port->is_uartdm)*/
+		reset_dm_count(port, 1);
+
+	/* Wait until FIFO is empty */
+	while (!(msm_hsl_read(port, regmap[vid][UARTDM_SR]) & UARTDM_SR_TXRDY_BMSK))
+		cpu_relax();
+
+	/* Write a character */
+	msm_hsl_write(port, c, regmap[vid][UARTDM_TF]);
+
+	/* Wait until FIFO is empty */
+	while (!(msm_hsl_read(port, regmap[vid][UARTDM_SR]) & UARTDM_SR_TXRDY_BMSK))
+		cpu_relax();
+
+	/* Enable interrupts */
+	msm_hsl_write(port, imr, regmap[vid][UARTDM_IMR]);
+
+	return;
+}
+#endif
+
+
 static struct uart_ops msm_hsl_uart_pops = {
 	.tx_empty = msm_hsl_tx_empty,
 	.set_mctrl = msm_hsl_set_mctrl,
@@ -1316,6 +1460,11 @@ static struct uart_ops msm_hsl_uart_pops = {
 	.config_port = msm_hsl_config_port,
 	.verify_port = msm_hsl_verify_port,
 	.pm = msm_hsl_power,
+#ifdef CONFIG_CONSOLE_POLL
+	.poll_init = msm_poll_init,
+	.poll_get_char	= msm_poll_get_char,
+	.poll_put_char	= msm_poll_put_char,
+#endif
 };
 
 static struct msm_hsl_port msm_hsl_uart_ports[] = {
